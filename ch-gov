#!/bin/bash

# [From https://github.com/RenatGilmanov/shell-script-template]
# ------------------------------------------------------------------
# [Author] James Cunningham
#          governance project environment commands
# ------------------------------------------------------------------

SUBJECT=ch-gov
VERSION=0.1.0
USAGE="Usage: ch-gov -hv args"

# --- Option processing --------------------------------------------
while getopts ":vh" optname
do
    case "$optname" in
        "v")
            echo "Version $VERSION"
            exit 0;
            ;;
        "h")
            echo $USAGE
            exit 0;
            ;;
        "?")
            echo "Unknown option $OPTARG"
            exit 0;
            ;;
        ":")
            echo "No argument value for option $OPTARG"
            exit 0;
            ;;
        *)
            echo "Unknown error while processing options"
            exit 0;
            ;;
    esac
done

shift $(($OPTIND - 1))

cmd=$1
param=$2
command="command_$1"

# -----------------------------------------------------------------
LOCK_FILE=/tmp/${SUBJECT}.lock

if [ -f "$LOCK_FILE" ]; then
    echo "Script is already running"
    exit
fi

# -----------------------------------------------------------------
trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE 

# -----------------------------------------------------------------

# define some colors to use for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# -----------------------------------------------------------------

# docker-compose functions
source ./bin/functions.sh

# commands

function command_hack {
    printf "${GREEN}The sky above the port was the color of television, tuned to a dead channel.${NC}\n"

    # catch unexpected failures, do cleanup and output an error message
    trap 'cleanup-hack ; printf "${RED}docker-compose Failed For Unexpected Reasons${NC}\n"'\
         HUP INT QUIT PIPE TERM

    hack
    
    if [ $? -ne 0 ] ; then
        printf "${RED}Docker Compose Failed${NC}\n"
        exit -1
    fi
}


# -----------------------------------------------------------------
# Running commands

if [ -n "$(type -t ${command})" ] && [ "$(type -t ${command})" = function ]; then 
    ${command}
else 
    echo "'${cmd}' is NOT a command"; 
fi
